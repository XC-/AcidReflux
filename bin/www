#!/usr/bin/env node
/**
 * Server setup based on generated express application.
 */

'use strict';

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug');
const http = require('http');
const https = require('https');
const fs = require('fs');
const _ = require('lodash');

var serverDebug = debug('AcidReflux:server');

const DEFAULT_ARGS = {
  httpPort: 3000,
  httpsPort: 3443,
  uiPort: 3990,
  listenHttps: false
};

const getArgs = () => {
  let args = process.argv.slice(2);
  let argObj = Object.assign({}, DEFAULT_ARGS);

  for (var i = 0; i < args.length; i++) {
    switch(args[i]) {
      case '--httpPort':
        if (i + 1 < args.length) {
          argObj.httpPort = normalizePort(args[i+1]);
        }
        i++;
        break;
      case '--httpsPort':
        if (i + 1 < args.length) {
          argObj.httpsPort = normalizePort(args[i+1]);
          argObj.listenHttps = true;
        }
        i++;
        break;
      case '--uiPort':
        if (i + 1 < args.length) {
          argObj.uiPort = normalizePort(args[i+1]);
        }
        i++;
        break;
      case '--privateKey':
        if (i + 1 < args.length) {
          argObj.privateKeyPath = args[i+1];
          argObj.listenHttps = true;
        }
        i++;
        break;
      case '--certificate':
        if (i + 1 < args.length) {
          argObj.certificatePath = args[i+1];
          argObj.listenHttps = true;
        }
        i++;
        break;
      default:
        break;
    }
  }
  return argObj;
};

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

const args = getArgs();

/**
 * Create HTTP server.
 */

var httpServer = http.createServer(app);

var uiServer = http.createServer(app);

httpServer.listen(args.httpPort, (err) => {
  console.log('HTTP SERVER...');
  if (err) {
    onError(err);
  } else {
    console.log(`Acid Reflux listening HTTP requests on port ${args.httpPort}...`);
  }
});


if (args.listenHttps) {
  try {
    var privateKey = fs.readFileSync(args.privateKeyPath, 'utf8');
  } catch (e) {
    console.error('Failed to open private key from path ', args.privateKeyPath);
    process.exit(1);
  }
  try {
    var certificate = fs.readFileSync(args.certificatePath, 'utf8');
  } catch (e) {
    console.error('Failed to open certificate from path ', args.certificatePath);
    process.exit(1);
  }

  var credentials = {key: privateKey, cert: certificate};
  var httpsServer = https.createServer(credentials, app);

  httpsServer.listen(args.httpsPort, (err) => {
    console.log('HTTPS SERVER...');
    if (err) {
      onError(err);
    } else {
      console.log(`Acid Reflux listening HTTPS requests on port ${args.httpsPort}...`);
    }
  });

}

uiServer.listen(args.uiPort, (err) => {
  console.log('UI SERVER...');
  if (err) {
    onError(err);
  } else {
    console.log(`Acid Reflux serving in port ${args.uiPort}...`);
  }
});

